{"meta":{"title":"Yingchi's blog","subtitle":"Notes and Random Thoughts","description":null,"author":"Yingchi","url":"http://blog.peiyingchi.com"},"pages":[{"title":"About","date":"2017-03-17T11:08:45.000Z","updated":"2017-03-17T11:08:45.000Z","comments":true,"path":"about/index.html","permalink":"http://blog.peiyingchi.com/about/index.html","excerpt":"","text":"Welcome ;) Glad you are here. 😉 My name is Pei Yingchi (裴英池), a final year student majoring in Business Analytics at National University of Singapore. If nothing goes wrong, I will join DataSpark as a junior data scientist in July 2017. You can find more about my experience on my home page. I created this place to record down my learning notes and random thoughts.Feel free to drop me an email and talk about anything. I’d love to hear from you."},{"title":"Tags","date":"2017-03-10T06:41:36.000Z","updated":"2017-03-09T16:30:13.000Z","comments":true,"path":"tags/index.html","permalink":"http://blog.peiyingchi.com/tags/index.html","excerpt":"","text":""},{"title":"Categories","date":"2017-03-10T06:41:36.000Z","updated":"2017-03-09T16:30:13.000Z","comments":true,"path":"categories/index.html","permalink":"http://blog.peiyingchi.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Image Hosting and HTTPS |图床与HTTPS","slug":"image-hosting-and-https","date":"2017-03-17T07:53:45.000Z","updated":"2017-03-19T08:17:08.000Z","comments":true,"path":"2017/03/17/image-hosting-and-https/","link":"","permalink":"http://blog.peiyingchi.com/2017/03/17/image-hosting-and-https/","excerpt":"Use images hosting service with HTTPS connections.把图片放到支持HTTPS链接的图床平台上。","text":"Use images hosting service with HTTPS connections.把图片放到支持HTTPS链接的图床平台上。 前言前几天把网站改到用HTTPS安全链接。 又想到一个任务是把博客的图片从Hexo asset folder加载模式改到用图床模式。这样一来有两个好处： 博客文章越来越多的时候hexo文件数会减半。因为之前的方式会给每篇post新建一个folder来放所有的图片等媒体 不会占用Digital Ocean的空间。购买的贫农级服务空间有限，能少用就少用点吧。 哦当然，要是用免费的图床服务啊。。有可能图床提供商整个服务崩掉。。那就没有然后了。。 Https 与小绿锁按照前一篇笔记的流程给网站加了证书之后，浏览器中并不一定会显示可爱的小绿锁。为什么？因为网站可以还引用了别的 HTTP 资源，比如 js、css、图片、等等。必须全站资源均是 HTTPS，才会在浏览器地址显示小绿锁。（我当时主页面用http://fonts...来引用Google Fonts，就不行。在文件里把链接改为://fonts...之后就好了。） 图床选择所以之前看到很多网上攻略用七牛的图床，但是经过多看多查，发现七牛的免费流量只支持HTTP，而HTTPS流量是要付费的。来搜集一下支持HTTPS的免费图床： imgur sm.ms （5MB limit） postimage.io （无需注册） 牛图网 （无需注册）","categories":[{"name":"Website Dev","slug":"Website-Dev","permalink":"http://blog.peiyingchi.com/categories/Website-Dev/"}],"tags":[{"name":"website dev","slug":"website-dev","permalink":"http://blog.peiyingchi.com/tags/website-dev/"}]},{"title":"Setup HTTPS Using Letsencrypt |用Let's Encrypt实现HTTPS","slug":"HTTPS-with-Letsencrypt","date":"2017-03-17T07:48:02.000Z","updated":"2017-03-19T03:30:41.000Z","comments":true,"path":"2017/03/17/HTTPS-with-Letsencrypt/","link":"","permalink":"http://blog.peiyingchi.com/2017/03/17/HTTPS-with-Letsencrypt/","excerpt":"How to use HTTPS for my personal website. Nginx server and Ubuntun 16.04.","text":"How to use HTTPS for my personal website. Nginx server and Ubuntun 16.04. My environment Web server: Nginx Operating System: Ubuntu 16.04 The steps are mainly following this Digital Ocean Tutorial:How To Secure Nginx with Let’s Encrypt on Ubuntu 16.04, but with some modifications for subdomain settings. Step 1: Install Let’s Encrypt ClientRun the following command on your Ubuntu server: 12sudo apt-get updatesudo apt-get install letsencrypt Step 2: Obtain an SSL CertificateChange the Nginx conf files to enable access to /.well-known folder: 1sudo nano /etc/nginx/sites-available/peiyingchi.com Add the following line inside the server block: 123location ~ /.well-known &#123; allow all;&#125; If you want to add the SSL cert to multiple domains or other subdomains, please do the same for all the nginx conf files. After changing the nginx conf files for the domains you want to setup HTTPS in, run the following: 1sudo letsencrypt certonly -a webroot --webroot-path=/var/www/peiyingchi.com/html -d peiyingchi.com -d www.peiyingchi.com To setup for subdomains together: 1sudo letsencrypt certonly --webroot -w /var/www/peiyingchi.com/html/ -d www.peiyingchi.com -d peiyingchi.com -w /var/www/blog.peiyingchi.com/html -d blog.peiyingchi.com You will be prompted to enter your contact email and agree some terms and conditions. My cert files are at : 1234567$ yingchi@yingchi-site:~$ sudo ls -l /etc/letsencrypt/live/peiyingchi.comtotal 0lrwxrwxrwx 1 root root 38 Mar 17 01:48 cert.pem -&gt; ../../archive/peiyingchi.com/cert1.pemlrwxrwxrwx 1 root root 39 Mar 17 01:48 chain.pem -&gt; ../../archive/peiyingchi.com/chain1.pemlrwxrwxrwx 1 root root 43 Mar 17 01:48 fullchain.pem -&gt; ../../archive/peiyingchi.com/fullchain1.pemlrwxrwxrwx 1 root root 41 Mar 17 01:48 privkey.pem -&gt; ../../archive/peiyingchi.com/privkey1.pem After obtaining the cert, you will have the following PEM-encoded files: cert.pem: Your domain’s certificate chain.pem: The Let’s Encrypt chain certificate fullchain.pem: cert.pem and chain.pem combined privkey.pem: Your certificate’s private key To further increase security, you should also generate a strong Diffie-Hellman group. To generate a 2048-bit group, use this command: 1sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048 Step 3: Configure TLS/SSL on Web Server (Nginx)Now that you have an SSL certificate, you need to configure your Nginx web server to use it. We will make a few adjustments to our configuration: We will create a configuration snippet containing our SSL key and certificate file locations. We will create a configuration snippet containing strong SSL settings that can be used with any certificates in the future. We will adjust the Nginx server blocks to handle SSL requests and use the two snippets above. First, let’s create a new Nginx configuration snippet in the /etc/nginx/snippets directory. To properly distinguish the purpose of this file, we will name it ssl- followed by our domain name, followed by .conf on the end: 1sudo nano /etc/nginx/snippets/ssl-peiyingchi.com.conf ssl-peiyingchi.com.conf12ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem; Next, we will create another snippet that will define some SSL settings. This will set Nginx up with a strong SSL cipher suite and enable some advanced features that will help keep our server secure. The parameters we will set can be reused in future Nginx configurations, so we will give the file a generic name: 1sudo nano /etc/nginx/snippets/ssl-params.conf ssl-params.conf123456789101112131415161718192021# from https://cipherli.st/# and https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.htmlssl_protocols TLSv1 TLSv1.1 TLSv1.2;ssl_prefer_server_ciphers on;ssl_ciphers &quot;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH&quot;;ssl_ecdh_curve secp384r1;ssl_session_cache shared:SSL:10m;ssl_session_tickets off;ssl_stapling on;ssl_stapling_verify on;resolver 8.8.8.8 8.8.4.4 valid=300s;resolver_timeout 5s;# Disable preloading HSTS for now. You can use the commented out header line that includes# the &quot;preload&quot; directive if you understand the implications.#add_header Strict-Transport-Security &quot;max-age=63072000; includeSubdomains; preload&quot;;add_header Strict-Transport-Security &quot;max-age=63072000; includeSubdomains&quot;;add_header X-Frame-Options DENY;add_header X-Content-Type-Options nosniff;ssl_dhparam /etc/ssl/certs/dhparam.pem; If you are interested, you can take take a moment to read up on HTTP Strict Transport Security, or HSTS, and specifically about the “preload” functionality. Preloading HSTS provides increased security, but can have far reaching consequences if accidentally enabled or enabled incorrectly. In this guide, we will not preload the settings, but you can modify that if you are sure you understand the implications Now that we have our snippets, we can adjust our Nginx configuration to enable SSL. Before we go any further, let’s back up our current server block file: 1sudo cp /etc/nginx/sites-available/peiyingchi.com /etc/nginx/sites-available/peiyingchi.com.bak Now, open the server block file to make adjustments.Blow are the 2 conf files for my top-level domain and my subdomain: 1sudo nano /etc/nginx/sites-available/peiyingchi.com peiyingchi.com1234567891011121314151617181920212223242526272829303132server &#123; listen 80; listen [::]:80; server_name peiyingchi.com www.peiyingchi.com; return 301 https://$server_name$request_uri;&#125;server &#123; # SSL configuration listen 443 ssl http2 default_server; listen [::]:443 ssl http2 default_server; include snippets/ssl-peiyingchi.com.conf; include snippets/ssl-params.conf; root /var/www/peiyingchi.com/html; # Add index.php to the list if you are using PHP index index.html index.php; server_name peiyingchi.com www.peiyingchi.com; location / &#123; try_files $uri $uri/ =404; &#125; location ~ /.well-known &#123; allow all; &#125;&#125; blog.peiyingchi.com123456789101112131415161718192021222324252627server &#123; listen 80; listen [::]:80; server_name blog.peiyingchi.com www.blog.peiyingchi.com; return 301 https://$server_name$request_uri;&#125;server &#123; # SSL configuration listen 443 ssl http2; listen [::]:443 ssl http2; include snippets/ssl-peiyingchi.com.conf; # NOTE: the same file as the top level domain include snippets/ssl-params.conf; root /var/www/blog.peiyingchi.com/html; index index.html; server_name blog.peiyingchi.com www.blog.peiyingchi.com; location / &#123; try_files $uri $uri/ =404; &#125; location ~ /.well-known &#123; allow all; &#125;&#125; Step 4: Adjust the FirewallIf you have the ufw firewall enabled, as recommended by the prerequisite guides, you’ll need to adjust the settings to allow for SSL traffic. You can see the current setting by typing: 1sudo ufw status To additionally let in HTTPS traffic, we can allow the “Nginx Full” profile and then delete the redundant “Nginx HTTP” profile allowance: 12sudo ufw allow 'Nginx Full'sudo ufw delete allow 'Nginx HTTP' Step 5: Enabling the Changes in NginxFirst, we should check to make sure that there are no syntax errors in our files. We can do this by typing: 1sudo nginx -t If your output matches the above, your configuration file has no syntax errors. We can safely restart Nginx to implement our changes: 1sudo systemctl restart nginx You can use the Qualys SSL Labs Report to see how your server configuration scores:Enter the following to your web browser: https://www.ssllabs.com/ssltest/analyze.html?d=example.com Step 6: Set Up Auto RenewalFrom Let’s Encrypt’s official documentation, you can run the following to test the renew function: 1sudo letsencrypt renew --dry-run --agree-tos Do not worry for the ‘Registering without email!’ warning. It does not hurt anything. If that appears to be working correctly, you can arrange for automatic renewal by adding a cron or systemd job which runs letsencrypt renew Since the renewal first checks for the expiration date and only executes the renewal if the certificate is less than 30 days away from expiration, it is safe to create a cron job that runs every week or even every day, for instance. Let’s edit the crontab to create a new job that will run the renewal command every week. To edit the crontab for the root user, run: 1sudo crontab -e Add the following lines: crontab entry1230 2 * * 1 /usr/bin/letsencrypt renew &gt;&gt; /var/log/le-renew.log35 2 * * 1 /bin/systemctl reload nginx This will create a new cron job that will execute the letsencrypt-auto renew command every Monday at 2:30 am, and reload Nginx at 2:35am (so the renewed certificate will be used). The output produced by the command will be piped to a log file located at /var/log/le-renewal.log.","categories":[{"name":"Website Dev","slug":"Website-Dev","permalink":"http://blog.peiyingchi.com/categories/Website-Dev/"}],"tags":[{"name":"website dev","slug":"website-dev","permalink":"http://blog.peiyingchi.com/tags/website-dev/"}]},{"title":"Rebuild Personal Website and Blog |重新搭建站点和博客","slug":"rebuild-personal-website-and-blog","date":"2017-03-11T10:03:02.000Z","updated":"2017-03-19T08:18:43.000Z","comments":true,"path":"2017/03/11/rebuild-personal-website-and-blog/","link":"","permalink":"http://blog.peiyingchi.com/2017/03/11/rebuild-personal-website-and-blog/","excerpt":"流水账日志","text":"流水账日志 心路历程 之前在Bluehost上买了个域名yingchi.com，就直接在它那里买了最基本的Web hosting服务，用的是LAPM stack(Linux, Apache, MySQL, and PHP)，花了半天找了个好看的个人主页模板，修修改改，填上经历技能就放那里没管了。 现在想添个博客上去，也督促自己把平时的笔记定时整理一下。 随便一查，发现我去，Bluehost的域名费不便宜啊。马上要续费了，大概 $15 USD一年，然后namecheap上是 $10一年。用GitHub的Student Pack还能白拿一年的yingchi.me域名玩。所以就把域名迁移到了namecheap。 然后又查到Digital Ocean的Web hosting也更便宜，还可以随便安装系统，用VPS。而Bluehost上给的服务是Shared hosting。就买了DO的服务，先把yingchi.me搞过去玩一玩。 想做到： 在namecheap管理域名 在DO host yingchi.com 并把个人资料页面放在这里 在blog.yingchi.com放基于Hexo平台的个人博客 基于现实的计划 因为在Bluehost的Web hosting服务还有一年(为什么要买这么久。。。), 所以yingchi.com的hosting先不动 用yingchi.me这个域名，在DO实现个人主页和博客的搭建 （这是个工程比较大的一步） 把yingchi.com域名host到DO，并第二步迁移到yingchi.com 在DO实现个人主页和博客的搭建 个人主页计划放在 yingchi.me 用普通HTML页面实现。博客放在blog.yingchi.me, 用Hexo实现 在本地搭建完成个人主页（先用原来的）和个人博客。Complete the development for the personal homepage and also the blog locally。流水账和踩坑过程记录在： 把这两套站点的文件部署到DO上。流水账和踩坑过程记录在： 心路历程3.的具体过程When I log in to my cPanel, under ‘performance’ tab, there is no ‘manage access’ option. It seems that I do not have a dedicated IP address.However, after looking up the charges for VPS or dedicated IP, it was around $20 per month. I don’t want to invest so much for now. So let’s try some other approachs: host my blog subdomain blog.peiyingchi.com on GitHub Pages. This option is free move my hosting service from bluehost to another server provider completely. E.g. Digital Ocean, where they provides VPS server at $4 per month. 如果不想麻烦学习VPS还有花钱去买这些服务，而且只是想简单的搭建一个Blog的话可以用第一种渠道。这个渠道搭建Hexo blog已经有很多网上教程可以跟着学。下面是一个比较全面的：http://blog.fens.me/hexo-blog-github/ 经过纠结😖，我没有用github作为服务器，最终选了第二种方，去买了DO的基本版的ubuntu server。 心路历程4.的具体过程这里我选了Digital Ocean, 从GitHub的Student pack里面可以拿到$50的promotion. Create a new DigitalOcean Droplets with Ubentu 16.04.2 x64.Select the $5/mo package.Add SSH keys. On what is SSH keys and how to add one, refer to this How To Use SSH Keys with DigitalOcean Droplets 不想在这里add shh keys直接点create。 会有邮件给你root的地址和密码，有另一封邮件告诉你怎么做一些简单的server setup。一步步跟着来就好。 Step 1: The Must-Haves Review the Ubuntu 14.04 server checklist which covers: Initial Ubuntu server setup tutorial with step-by-step configuration instructions, andConnecting to your Droplet with SSH. Use DigitalOcean’s DNS to set up your hostname from the Control Panel. Step 2: Web Servers Install the powerful Nginx web server on Ubuntu. Use Nginx virtual hosts to serve multiple sites on one server. 在设置Domain的过程中可能会碰到下面这些名词： A记录A记录是用来指定主机名（或域名）对应的IP地址记录。用户可以将该域名下的网站服务器指向到自己的web server上。同时也可以设置您域名的二级域名。CNAME记录CNAME记录，即：别名记录。这种记录允许您将多个名字映射到同一台计算机。 通常用于同时提供WWW和MAIL服务的计算机。例如，有一台计算机名为“host.mydomain.com”（A记录）。 它同时提供WWW和MAIL服务，为了便于用户访问服务。可以为该计算机设置两个别名（CNAME）：WWW和MAIL。 Install LEMP stackFollow this tutorial:How To Install Linux, Nginx, MySQL, PHP (LEMP stack) in Ubuntu 16.04 Error installing mysql?（安装Mysql出现错误?)Uninstall mysql completely (按照以下的教程完全卸载Mysql再重新安装):Uninstall MySQL from Ubuntu 16.04Uninstall MySQL completely Set Up Nginx Server Blocks (Virtual Hosts) on Ubuntu 16.04Follow this tutorial:How To Set Up Nginx Server Blocks (Virtual Hosts) on Ubuntu 16.04 Step One: Set Up New Document Root DirectoriesBy default, Nginx on Ubuntu 16.04 has one server block enabled by default. It is configured to serve documents out of a directory at /var/www/html We will create a directory structure within /var/www for each of our sites. The actual web content will be placed in an html directory within these site-specific directories. This gives us some additional flexibility to create other directories associated with our sites as siblings to the html directory if necessary. 12sudo mkdir -p /var/www/yingchi.me/htmlsudo mkdir -p /var/www/blog.yingchi.me/html We can use the $USER environmental variable to assign ownership to the account that we are currently signed in on (make sure you’re not logged in as root). This will allow us to easily create or edit the content in this directory: 12sudo chown -R $USER:$USER /var/www/yingchi.me/htmlsudo chown -R $USER:$USER /var/www/blog.yingchi.me/html Step 2: upload your website files to your domainsYou can simple create a dummy index.html page if you just want to test.Otherwise, you can upload your files using SFTP or other file transfer methods. Step 3: Create server block files for each domainwe will create our first server block config file by copying over the default file: 12sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/yingchi.mesudo nano /etc/nginx/sites-available/yingchi.me Edit the file, and make it looks like the following: 12345678910111213server &#123; listen 80; listen [::]:80; root /var/www/yingchi.me/html; index index.html index.htm index.nginx-debian.html; server_name yingchi.me www.yingchi.me; location / &#123; try_files $uri $uri/ =404; &#125;&#125; Do the same for the 2nd domain. Step 4: Enable your Server Blocks and Restart NginxNow that we have our server block files, we need to enable them. We can do this by creating symbolic links from these files to the sites-enabled directory, which Nginx reads from during startup. We can create these links by typing: 12sudo ln -s /etc/nginx/sites-available/yingchi.me /etc/nginx/sites-enabled/sudo ln -s /etc/nginx/sites-available/blog.yingchi.me /etc/nginx/sites-enabled/ What is symbolic link?A symbolic link, also termed a soft link, is a special kind of file that points to another file, much ==like a shortcut in Windows or a Macintosh alias==. Unlike a hard link, a symbolic link does not contain the data in the target file. It simply points to another entry somewhere in the file system. This difference gives symbolic links certain qualities that hard links do not have, such as the ability to link to directories, or to files on remote computers networked through NFS. Also, when you delete a target file, symbolic links to that file become unusable, whereas hard links preserve the contents of the file.To create a symbolic link in Unix/Linux, at the Unix prompt, enter: 1ln -s source_file myfile Replace source_file with the name of the existing file for which you want to create the symbolic link (this file can be any existing file or directory across the file systems). Replace myfile with the name of the symbolic link. The ln command then creates the symbolic link. After you’ve made the symbolic link, you can perform an operation on or execute myfile, just as you could with the source_file. You can use normal file management commands (e.g., cp, rm) on the symbolic link. Transfer files Local &lt;==&gt; Remote Server using SFTPFollow this tutorial if it’s your first time using SFTP:How To Use SFTP to Securely Transfer Files with a Remote ServerYou can also set up SFTP on Cyberduck by providing your server IP, username and password. Put port number as 22. I encountered the following error when trying to upload files through SFTP. I then tried to upload files from terminal (log in by sftp yingchi@xx.xx.xx.xx) and I got 1remote open(\"/var/www/yingchi.me/html/index.html\"): Permission denied So it seems that I did not set the permission for the folder correctly. After some search, here is the solution: 1. add user “yingchi” to group “www-data” (below replace yingchi with your username): 1sudo usermod -a -G www-data yingchi 2. set permissions for user group www-dataHere, because I want to upload my files to /var/www/yingchi.me/...and also /var/www/blog.yingchi.me/..., so I opened the permission for /var/www. If you just have one domain, and the files are under /var/www/html, you can modify the path and only open permission for that folder. 12sudo chown -R www-data:www-data /var/wwwsudo chmod -R g+w /var/www Nginx server blocks 设置https://fraserxu.me/2013/06/22/Nginx-for-developers/","categories":[{"name":"Website Dev","slug":"Website-Dev","permalink":"http://blog.peiyingchi.com/categories/Website-Dev/"}],"tags":[{"name":"website dev","slug":"website-dev","permalink":"http://blog.peiyingchi.com/tags/website-dev/"}]},{"title":"Hexo User Notes |Hexo的基本使用","slug":"hexo-user-notes","date":"2017-03-11T00:33:24.000Z","updated":"2017-03-19T03:10:29.000Z","comments":true,"path":"2017/03/11/hexo-user-notes/","link":"","permalink":"http://blog.peiyingchi.com/2017/03/11/hexo-user-notes/","excerpt":"使用Hexo的常用命令和一些格式上的小技巧。","text":"使用Hexo的常用命令和一些格式上的小技巧。 基本命令 $ hexo new [layout] &lt;title&gt; 创建一篇新文章。其中layout是可选参数，默认值是post。Hexo提供的layout在scaffolds目录下，也可以在此目录下自建layout文件。新建的文件则会保存到 source/_post目录下。你也可以更改默认布局的参数，如post布局，你需要打开 scaffolds/post.md，增加类别和描述。再新建一篇文章就能看到增加了文章参数。 $ hexo generate 也可简写为$ hexo g 在部署前需要通过该命令把所有的文章做静态化处理，生成相应的html、javascript、css。 $ hexo deploy也可简写为$ hexo d 负责生成静态文件后的发布。在发布到你的服务器之前要先配置好deploy指令，在全局配置文件(_config.yml)中找到deploy，并修改属性值。 在文章中加入图片要在文章中插入图片，有两个选择，一是使用图床，二是将图片与网页文件一起部署。两种方法各有利弊，如果打算部署到GitHub或GitCafe上，个人推荐使用图床。如果是部署到七牛上，则直接使用部署方式。 不在主页显示全部文章内容我们在编辑内容时，在合适的地方添加一行代码：&lt;!-- more --&gt;，在它之上是摘要，是在主页会显示的文字部分。在它之下是余下全文，在主页中会多一个阅读全文的按钮，点击后才会看到全部内容。 文章基本参数打开 scaffolds/post.md 增加类别和描述，修改默认布局的参数： post.md12345678910---title: #标题date: #日期时间tags: #标签categories: #分类comments: #是否允许评论 true 或 falsetoc: #是否添加文章目录 true 或 falsethumbnail: #侧边栏封面图banner: #文章顶部封面图--- 在新建一篇文章，你就能看到新建的文章已经新增了这些参数，不用每次自己手打，不需要的值就可以空着。 代码高亮并为代码块添加标题Markdown中插入代码，是通过添加三个反引号（`）或三个波浪号（~）来实现的。如下示例 1code here 像大多数的markdown, 如github的markdown都是这种写法。这种写法在[language]后面不能加其它参数，否则会输出不正常。 Hexo自带高亮：Code Block 使用格式如下： 123&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;code snippet&#123;% endcodeblock %&#125; 注意：如果使用静态的代码高亮，则必须关闭hexo自带高亮，关闭之后，如果以前的.md源文件使用的是hexo第二种插入代码的方式，则会导致hexo-renderer-marked渲染异常。 关于 Markdown 语法格式尽量使用规范的 Markdown 语法格式参考：http://www.cirosantilli.com/markdown-style-guide/#code","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://blog.peiyingchi.com/categories/Hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://blog.peiyingchi.com/tags/hexo/"}]},{"title":"Hexo Icarus Theme Settings |Icarus主题设置","slug":"hexo-icarus-settings","date":"2017-03-10T15:34:33.000Z","updated":"2017-03-19T08:08:39.000Z","comments":true,"path":"2017/03/10/hexo-icarus-settings/","link":"","permalink":"http://blog.peiyingchi.com/2017/03/10/hexo-icarus-settings/","excerpt":"关于Hexo Icarus主题配置的详细介绍，和相关的一些小技巧。","text":"关于Hexo Icarus主题配置的详细介绍，和相关的一些小技巧。 前言此篇不介绍HEXO的搭建，只讲ICARUS的个性化配置，HEXO的配置在国内也有很多的教程。教程参考了这里：作者MoRan_Sky, 这里：作者Lemon和这里：作者Fengyu。 发布者已经把基本的配置步骤写在了wiki里，还包括FQA，如果有什么解决不了的问题也可以到Icarus GitHub Wiki去提问，或看有没有和你同样问题的回答。 ICARUS主题什么是ICARUS 一种很清爽的HEXO主题 安装了评论，分享框架，非常之方便 ICARUS安装ICARUS主题包可以在这里找到，但更多人是采用GIT来下载的，切换到HEXO根目录,然后打入： 1git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus 下载之后将根目录里的 1theme: 你之前的主题 改成： 1theme: icarus 接下来可以输入hexo s来在本机生成，然后在 https://localhost:4000 打开博客主页。 主题设置自带可更改项目LOGO配置在博客页面的左上角，有一个LOGO，因为我们没有更改，所有这是作者的LOGO。 先确定你的LOGO图片的后缀是.png，然后把你的LOGO图片重命名为logo.png，然后在你主题文件中的css/images/文件夹，将这张图片粘贴来替换之前的图片。 用户信息配置在主页的左边，这里显示的是博客作者的信息。 打开主题的_config文件，找到profile一栏，你可以自定义你的profile信息。 _config.yml12345678profile: enabled: true #是否显示博客作者信息在左侧 avatar: css/images/avatar.png #博客作者的头像，可以到相应的路径去替换 gravatar: #如果这里写入邮箱的话，头像会重新加载 author: PPOffice #作者名 author_title: Web Developer &amp; Designer #一句话描述自己 location: Harbin, China #位置 follow: https://github.com/ppoffice/ #关注我按钮点击去到的网址 如果想把FOLLOW按钮稍作修改，变成联系我，并且把链接变成发送邮件到自己的邮箱的话： 1follow: mailto:wulala@123.com #效果是直接到发送邮件的界面，把languages/zh_CN.yml中的follow信息改成了联系我 标签，分类和关于在最上方的菜单栏，我们点击”标签”，”分类”，”关于”都会显示无法找到文件，ICARUS主题很好，它为我们预设了这三个分类。 在主题的_source文件里，把里头的三个文件全部复制，然后粘贴到HEXO跟目录的source文件夹，再刷新一下网页，就可以看见啦。 代码高亮ICARUS主题预设了许多代码高亮的主题，具体的名称可以在主题目录的source/css/_highlight文件夹里找到。把主题的_config文件里的highlight类型换成你喜欢的类型。 关于选择代码高亮语言的问题，请看这里。 搜索ICARUS主题提供了3种搜索方式，个人喜欢insight，当然你也可以选择baidu或者swiftype。 使用insight的话先把博客根目录下面的_config.yml里面的 12search: insight: false 改成 12search: insight: true 接下来需要安装一个小插件： 1npm install hexo-generator-json-content --save 接下来可以刷新一下网页，点击右上角的搜索框，就会发现已经成功配置了。 删除搜索按钮如果使用的是insight搜索，所以那个搜索按钮没有什么意义，可以找到主题文件中的layout/search/index.ejs，将里面的: 1234&lt;form class=\"search-form\"&gt; &lt;input type=\"text\" class=\"ins-search-input search-form-input\" placeholder=\"&lt;%= __('index.search') %&gt;\" /&gt; &lt;button type=\"submit\" class=\"search-form-submit\"&gt;&lt;/button&gt;&lt;/form&gt; 改成： 1234&lt;form class=\"search-form\"&gt; &lt;input type=\"text\" class=\"ins-search-input search-form-input\" placeholder=\"&lt;%= __('index.search') %&gt;\" /&gt; &lt;!--button type=\"submit\" class=\"search-form-submit\"&gt;&lt;/button--&gt;&lt;/form&gt; 之后你就会发现那个搜索按钮没了。 多说评论评论是个很重要的东西，这可以让你和读者进行沟通。 如果需要开启评论功能，需要先去相应的地方注册账号，然后按照提示把ID或名字添加上。点击这里 跟着做就对了。剩下一些评论框自定义的样式就自行百度，或注册后在网站内进行更改设置就好了。 多说：在多说官网先创建一个账号，然后再这里创建一个站点，站点地址写博客的地址，在多说域名那里按照要求填入，填入的名称（也就是去掉.duoshuo.com）就是多说的shortname。 ICARUS已经为你写好了评论的框架，你不需要自己搭建，你只需要把主题的_config文件中的comment改成这样： 1234comment: disqus: #写入你的disqus shortname, if have duoshuo: #写入你的多说shortname, if have youyan: #写入你的友言shortname, if have 之后刷新页面，拉到下面，就会看到评论的界面啦。你可以前往你自己的多说域名然后自定义评论。对于想使用Disqus的用户，去Disqus官网新建个账户。Create a new forum， 然后按照官方指南把自己的forum integrate到博客来。现在对于Hexo平台还没有integrate好的选项，没关系，等到你选择自己的forum名字的时候记住那个shortname，到icarus主题里的_config文件里填上就好了。主题会帮你做好所有的integrate。 分享在本地使用bdshare，jiathis都是可以的，但在Github上神奇的消失了。我也试过bshare，dsshare，但还是神奇的消失了，读者可以自己的试一下。如果你也用Github Page，建议把主题的_config文件中的share改成: 1share: addtoany 友情链接ICARUS自带友情链接功能，在主题的_config中的miscellaneous里： 12links: 显示名: 链接 比如： 123links: GitHub: http://github.com MCBBS: http://mcbbs.net 个性化修改删除搜索按钮如果使用的是insight搜索，所以那个搜索按钮没有什么意义，可以找到主题文件中的layout/search/index.ejs，将里面的: 1234&lt;form class=\"search-form\"&gt; &lt;input type=\"text\" class=\"ins-search-input search-form-input\" placeholder=\"&lt;%= __('index.search') %&gt;\" /&gt; &lt;button type=\"submit\" class=\"search-form-submit\"&gt;&lt;/button&gt;&lt;/form&gt; 改成： 1234&lt;form class=\"search-form\"&gt; &lt;input type=\"text\" class=\"ins-search-input search-form-input\" placeholder=\"&lt;%= __('index.search') %&gt;\" /&gt; &lt;!--button type=\"submit\" class=\"search-form-submit\"&gt;&lt;/button--&gt;&lt;/form&gt; 之后你就会发现那个搜索按钮没了。 把文章界面放宽在ICARUS主题里，如果你把屏幕放的宽一点，真正的文章就只有中间一小条，我们需要稍微把文章DIV放宽一点。 把主题的source/css/_variables.styl文件打开，翻到43行左右，把： 1main-column = 7 改成 1main-column = 10 //或者也可以改成9，着看个人喜好，我觉得10正好合适 设置友情链接为打开新页面之前的友情链接会在自身的博客覆盖，如果想要在新窗口打开（比较推荐这样）。 把主题文件的layout/widget/links.ejs打开，把： 123&lt;li&gt; &lt;a href=&quot;&lt;%- theme.miscellaneous.links[i] %&gt;&quot;&gt;&lt;%= i %&gt;&lt;/a&gt;&lt;/li&gt; 改成 123&lt;li&gt; &lt;a href=&quot;&lt;%- theme.miscellaneous.links[i] %&gt;&quot; target=&quot;_blank&quot;&gt;&lt;%= i %&gt;&lt;/a&gt;&lt;/li&gt; 社会链接在关注我按钮的下面的下面，有一排图标，这就是社会链接，也就是你在别的地方的首页。它是fa fa-icon，ICARUS自带FontAwesome，所有你再安装的时候只要写入class名就可以。详细的图标内容可以在这里找到。 格式：fa-后面的内容，图标: 链接 打开主题的_config文件： 123456social_links: github: #你的Github首页 envelope: #你的邮箱 user: #博客主页 reorder: #博客分类页面 sort-amount-asc: #博客历程页面 在这里，我们只需要输入fa-后面的内容当图标就行了。 自定义社会链接title在社会链接的图标上停留的时候，会弹出图标名的title，但有时候我们想自定义title，怎么办呢？ 打开主题文件中的layout/common/profile.ejs文件，把： 123&lt;a href=&quot;&lt;%- url_for(theme.customize.social_links[i]) %&gt;&quot; target=&quot;_blank&quot; title=&quot;&lt;%= i %&gt;&quot; &lt;%= tooltipClass %&gt;&gt; &lt;i class=&quot;fa fa-&lt;%= i %&gt;&quot;&gt;&lt;/i&gt;&lt;/a&gt; 改成： 123&lt;a href=&quot;&lt;%- url_for(theme.customize.social_links[i].link) %&gt;&quot; target=&quot;_blank&quot; title=&quot;&lt;%= theme.customize.social_links[i].title %&gt;&quot; &lt;%= tooltipClass %&gt;&gt; &lt;i class=&quot;fa fa-&lt;%= i %&gt;&quot;&gt;&lt;/i&gt;&lt;/a&gt; 那么我们在config里的social_links的表达内容就是： 123图标名: link: 链接 title: 鼠标选中的文本 横幅和略缩图在HEXO的根目录source/_posts文件夹，里面有你的文章，ICARUS允许你为文字设置横幅与略缩图，切记都要在两个—之间输入。略缩图的设置方式：thumbnail：图片 横幅的设置方式：banner：图片 修改代码的的边距修改之前的代码块长这样： 这个代码块的边距个人觉得有点大了。尤其对于只有一两行的代码，很占空间。从哪里能改呢？先从主体的CSS文件看起：~/hexo_blog/themes/icarus/source/css/style.styl里面与code有关的有两个地方，改了在第30行附近的设置，发现并没有什么变化。再往下看，发现这个另外一个文件被调用了 @import &quot;_highlight/index&quot;，于是我们去~/hexo_blog/themes/icarus/source/css/——highlight/index.styl看看： index.styl1234567891011121314151617181920.highlight margin: 0px display: block overflow-x: auto padding: 15px 20px font-size: font-size font-family: font-mono line-height: font-size * line-height table margin: 0 width: auto td border: none td.code padding-right: 20px .gutter pre color: #666 text-align: right padding-right: 20px 我把padding相关的参数改成10px 给图片加阴影有时候添加的图片可能会与文章背景混淆，使得读者看不清到底哪部分是图片哪部分是文章。使用img-shadow为图片添加边角阴影可以更加凸显图片的位置，也能更美观。在article.styl里面加入以下： 12.img-shadow box-shadow: 3px 2px 3px #ddd; 关于CSS3 shadow属性的参数具体可以参考W3School的Tutorial 使用HTML语法插入图片: 1&lt;img src=\"http://test.jpg\" class=\"img-shadow\" /&gt; 修改引用的渲染格式改动之前的是这样的： 个人不是很喜欢这种模式。不简洁，也占空间。同样从从主体的CSS文件看起：~/hexo_blog/themes/icarus/source/css/style.styl，发现调用了@import &quot;_partial/article&quot;。打开它发现对blockquote的设置如下： article.styl12345678910111213141516171819202122232425blockquote position: static font-family: font-serif font-size: 1.1em margin: 0 -20px padding: 10px 20px 10px 54px background: #fcfcfc border-left: 4px solid #eee &amp;:before top: 20px left: 10px content: &quot;\\f10d&quot; color: #e2e2e2 font-size: 32px; font-family: FontAwesome text-align: center position: static footer font-size: font-size margin: line-height 0 font-family: font-sans cite &amp;:before content: &quot;—&quot; padding: 0 0.5em 我把它改为下面这样 1234567891011121314151617blockquote position: static font-family: font-sans font-size: 1em margin: 0 0 1.3em 0 padding: 6px background: #fcfcfc border-left: 5px solid #ef9024 border-top: 1px solid $grey-light border-bottom: 1px solid $grey-light border-right: 1px solid $grey-light cite::before &#123; content: \"-\"; padding: 0 5px; &#125;blockquote p &#123; margin: 5px; &#125; testing blockquote 在Post页面关闭侧边栏点进去文章的时候觉得侧边栏(分类，标签…)让人觉得有点多余，不能专心看文。就想找方法把它设置为只在首页显示而不在文章页面显示。 打开~/hexo_blog/themes/icarus/layout/layout.ejs会找到下面一行代码 layout.ejs123&lt;% if (theme.custom.sidebar) &#123; %&gt; &lt;%- partial(&apos;common/sidebar&apos;, null, &#123;cache: !config.relative_link&#125;) %&gt;&lt;% &#125; %&gt; theme.custom.sidebar 指的是主题_config.yml里面的参数。我们可以对应的找到custom下面的sidebar。发现它只有left, right两个设置。 没关系，那我们就自己加个参数在_config.yml里面吧： _config.yml123# Added by Yingchipost_sidebar: false #display sidebar in post page if truehome_sidebar: true #display sidebar in home page if true 现在在回到layout.ejs把之前的三行改成下面这样的： layout.ejs123456&lt;% if (is_home() &amp;&amp; theme.home_sidebar) &#123; %&gt; &lt;%- partial(&apos;common/sidebar&apos;, null, &#123;cache: !config.relative_link&#125;) %&gt;&lt;% &#125; %&gt;&lt;% if (is_post() &amp;&amp; theme.post_sidebar) &#123; %&gt; &lt;%- partial(&apos;common/sidebar&apos;, null, &#123;cache: !config.relative_link&#125;) %&gt;&lt;% &#125; %&gt; is_post(), is_home() 是hexo自带的函数 Wait, 以为现在就万事大吉了么，事情并没有这么简单。。你会发现文章的宽度并不会自动调整。打开JavaScript Console会发现文章所在元素是&lt;section id=&quot;main&quot;&gt;，我们现在就去主题的文件里找对它的设置。找到文件~/hexo_blog/themes/icarus/source/css/style.styl style.styl12345678#main @media mq-normal column(main-column) @media mq-tablet if sidebar column(main-column-tablet) else width: 100% 改成下面这样： style.styl12345678910#main @media mq-normal column(main-column) @media mq-tablet if is_home() and home_sidebar column(main-column-tablet) if is_post() and post_sidebar column(main-column-tablet) else width: 100% @media xxx, side_bar etc 都是在别处(_variables.styl)定义好的CSS规则和变量 接下来打开 ~/hexo_blog/themes/icarus/source/css/_variables.styl在//Sidebar这个部分加入我们在上面用到的变量： _variables.styl12345// Sidebarsidebar = hexo-config(\"customize.sidebar\")thumbnail-default-small = 'images/thumb-default-small.png'home_sidebar = hexo-config(\"home_sidebar\")post_sidebar = hexo-config(\"post_sidebar\") 更多如果还想自定义CSS的话，主题样式文件都在themes/icarus/source/css/_partial里，对照着页面文件找到对应的class样式去修改吧。 比如我这里发现在打开文章的时候，显示的效果并不是很理想。 时候可以在测试页面按cmd+opt+j调出Javascript console查看元素。会发现它是从根目录下public/css/style.css而来，但是我们直接改这里的话是没有用的。因为所有public文件夹下都是由hexo g生成的。 所以这里可以更改我们所用主题的css生成文件。例如我的在这个路径下~/hexo_blog/themes/icarus/source/css 桑心的是，我试图修改了_variables.styl里面的sidebar-column之类，然后运行 12345$ hexo cleanINFO Deleted database.INFO Deleted public folder.$ hexo g$ hexo s 发现并没有什么*用。。。过了几天意识到作为没有基础的小白，思路已经错了。我想要做到的是在文章页面只显示文章，并且居中，而不现实profile和sidebar。在主CSS文件里面改的话，它并不能辨别这个页面是否是文章页面，改动@media下面的内容会对所有页面的#main元素造成影响。 所以去查看了关于Hexo主题开发的一些教程，发现对于不同类型页面一般是由主题下的layout文件夹里的*.layout文件控制。查了简单的ejs语法资料，修改成下面的样子 layout.ejs12345678910111213141516171819202122232425&lt;div id=\"container\"&gt; &lt;%- partial('common/header') %&gt; &lt;div class=\"outer\"&gt; &lt;% if (theme.customize.profile.enabled &amp;&amp; !is_post()) &#123; %&gt; &lt;%- partial('common/profile', null, &#123;cache: !config.relative_link&#125;) %&gt; &lt;% &#125; %&gt; &lt;% if (is_post()) &#123; %&gt; &lt;script type='text/javascript'&gt; $('body').append(\"&lt;style type='text/css'&gt;@media screen and (min-width: 1200px) &#123; #main &#123;margin: auto; width: 70%; display: block; float:none;&#125;&#125;&lt;/style&gt;\"); &lt;/script&gt; &lt;script type='text/javascript'&gt; document.querySelector('style').textContent += \"@media screen and (max-width: 1199px) and (min-width: 800px) &#123; #main &#123;margin: auto; width: 70%; display: block; float:none;&#125;&#125;\" &lt;/script&gt; &lt;% &#125; %&gt; &lt;section id=\"main\"&gt;&lt;%- body %&gt;&lt;/section&gt; &lt;% if (is_home() &amp;&amp; theme.home_sidebar) &#123; %&gt; &lt;%- partial('common/sidebar', null, &#123;cache: !config.relative_link&#125;) %&gt; &lt;% &#125; %&gt; &lt;% if (is_post() &amp;&amp; theme.post_sidebar) &#123; %&gt; &lt;%- partial('common/sidebar', null, &#123;cache: !config.relative_link&#125;) %&gt; &lt;% &#125; %&gt; &lt;/div&gt; &lt;%- partial('common/footer', null, &#123;cache: !config.relative_link&#125;) %&gt; &lt;%- partial('common/scripts') %&gt;&lt;/div&gt; 注意：代码内两种改变css的方法都可用，放在这里只是给自己做个记录 然后就好啦~","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://blog.peiyingchi.com/categories/Hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://blog.peiyingchi.com/tags/hexo/"}]},{"title":"区块链真的必要吗","slug":"区块链真的必要吗","date":"2017-02-19T02:55:28.000Z","updated":"2017-03-19T13:27:00.000Z","comments":true,"path":"2017/02/19/区块链真的必要吗/","link":"","permalink":"http://blog.peiyingchi.com/2017/02/19/区块链真的必要吗/","excerpt":"区块链技术需要继续克服的难点和其必要性的讨论。","text":"区块链技术需要继续克服的难点和其必要性的讨论。 你真的需要一个区块链应用吗？ 成本。全部的成本对于区块链技术而言，首先是维护成本。区块链要运行，必须有一定的投资。如果要安全运行，就必须设计出安全机制。而安全机制也需要成本。在目前而言，说区块链比”传统技术”更好的，主要是从安全性、透明性、不可更改（防伪）等特性上出发。那么，要维持这些特性，就必须维持一个符合区块链技术特性的系统——一个开放、分布式的、并且足够安全的数据库系统。 但是，维持这样一个系统，或者说同时达到这些目标，所需的成本非常昂贵。对于一个符合区块链技术特性的系统，首先要满足的是去中心化。这种去中心化的分布式不仅仅是“灾备”级别的分布式，而是系统中必须存在足够多个互不隶属，且独立决策的节点，并且记录区块链的权利在这些节点中以某些方式公平产生。也就是说，一个区块链系统中如果有100个份额的决策权，某个主体不能拥有51个以上。区块链系统不能由任何一个人说了算，至少要保证任何一个主体（或一致行动人）不占有超过51%的控制权。如果一个区块链系统全部或大部分由某个主体控制，那么和由该主体直接记录就没有差别了，为什么要用区块链呢？之所以用区块链，目的就是为了防止少数人操纵，是基于对个体的不信任。如果单一主体控制了区块链，区块链就失去了意义，甚至还不如由该主体维护的中心化系统效率高。 中心化并不一定代表着低效率。在特定的范围内，中心化带来的资源集中式可以大大提升效率的。就以银联为例，银联是国内银行业清结算的中心，没加银行只需要和银联对接即可实现和所有银行的交易。若去中心化，每家银行需要和所有的交易对手去对接。Blockchain的去中心化，只能在特定领域（即不适合中心化的领域）发挥作用。 当然，对于为了提高效率，降低内耗的联盟链来讲，还是有一定的应用价值。比如对银行来说：银行是不会接受谁都能来参与形成节点的区块链的，如果违法违规的事件发生时，银行没有权利保护被受害人，老百姓是不会买账的。那么，银行就必须限制节点参与记账，有且只有银行的“亲信节点”能够记账。这样，就保证银行的命令和想法能被每一个记账人执行而不出漏子，也同时保证隔壁不会有新的记账人跳进你的链里来搞事。这就便是“中心化的”区块链了。 现在很多创业者们，说能用区块链解决信任的问题。我也不是想泼冷水…但是你们一没比特币那样大量的矿工和算力，二没金字塔顶端阶层的庞大信用，三没有木仓，这样的区块链就是无本之木，搞出来的应用还不如不用区块链简洁，除了忽悠风投好讲故事之外还有啥用啊？ 必要性必要性上面叙述了为了保证安全，必须投入大量成本。而成本又必须要来源于系统之外——不然的话，区块链就又变回了少数人操纵的游戏。而如此麻烦复杂的系统，真的是必要的吗？且不说金融系统目前有完善的解决方案，我们就谈一点：如果一个比特币交易所（或者：银行），哪怕采用了“区块链”技术，你还是要先信任它。不管这家高大上的机构采用了何种技术，你首先要把钱交给它。 当你把钱交给它以后，意味着你已经信任它了——那么，它采用什么技术，还有什么关系吗？（有的吧，比如说用了这个科技才会得到信任？）且不论用区块链记录股权是否合理，购买一家公司的股权，说明已经认可了这家公司的股权合同。至于这家公司以后命运如何，至少当你决定买下这股权时，已经决心承担持有期间的风险。此时，其实最大的风险已经被你接受，至于权益是以何种形式记载，无论是记载在羊皮纸还是区块链，只是形式的区别。真正重要的是你已经确立了权益关系。因此，在使用区块链进行所谓股权交易时，只是简化了股权交割和股权证明保存的步骤。或者说，保证你的股权证不会丢失或者被盗。当然事实上使用比特币记录股权是非常危险的，比特币私钥随时可能丢失和被盗——还不能补发，这和你丢了A股账户卡那张破纸完全不是一个性质。如果你的权益私钥丢失了，你就事实上失去了对公司权益的所有权。更不要说区块链系统的成本还包含学习成本！ 替代相比区块链这个复杂脆弱成本高昂的系统，现有的系统在处理很多问题上已经足够好了。现在的证券、银行的电子交易系统，虽然还有这样那样的问题，但能保证起码的安全，并有相当的效率。交易所的系统处理都是微秒级撮合，最快的日内选手也能发挥优势。而区块链为了保证安全，至少也要异步处理，延迟个半分钟吧？——这样效率的损失，究竟有否必要呢？ 参考：Velaciela 区块链的现有难题处理性能如何提高交易的吞吐量，同时降低交易的确认延迟。目前，公开的比特币区块链只能支持平均每秒约 7 笔的吞吐量，一般认为对于大额交易来说，安全的交易确认时间为一个小时。小额交易只要确认被广播到网络中并带有交易服务费用，即有较大概率被最终打包到区块中。 因为在当前的算力下，对于6个区块（1小时）以前所记录的区块基本没有可以更改的可能性。 区块链系统跟传统分布式系统不同，其处理性能无法通过单纯增加节点数来进行扩展，实际上，很大程度上取决于单个节点的处理能力。高性能、安全、稳定性、硬件辅助加解密能力，都将是考察节点性能的核心要素。 一方面可以将单个节点采用高性能的处理硬件，同时设计优化的策略和算法，提高性能；另外一方面将大量高频的交易放到链外来，只用区块链记录最终交易信息，如 闪电网络 等。类似的，侧链（side chain）、影子链（shadow chain）等的思路在当前阶段也有一定的借鉴意义。类似设计可以很容易的将交易性能提升 1-2 个数量级。此外，如果采用联盟链的方式，在一定的信任前提和利益约束下优化设计，也可以换来性能的提升。目前，开源区块链自身在平台层面已经实现普通配置，单客户端每秒数百次的交易吞吐量（参考后面的 性能评测数据），乐观预测将很快突破每秒数千次的基准线，但离现有证券交易系统的每秒数万笔的峰值还是有较大差距。另外，从工程设计和平台部署上，都存在一些可以优化的地方。 注：VISA 系统的处理均值为 2000 tps，号称的峰值为 56,000 tps；某支付系统的处理峰值超过了 85,000 tps；某证券交易所号称的处理均（峰）值在 80,000 tps 左右。 扩展性常见的分布式系统，可以通过增加节点来扩展整个系统的处理能力。对于区块链网络系统来说，这个问题并非那么简单。 网络中每个参与维护的核心节点都要保持一份完整的存储，并且进行智能合约的处理。因此，整个网络的总存储和计算能力，取决于单个节点。甚至当网络中节点数过多时，可能会因为一致性的达成过程延迟降低整个网络的性能。尤其在公有网络中，由于大量低质量处理节点的存在问题将更明显。信息量越大， 交叉验证所需的时间越长，效率也会也会越地下。所以，区块链解决了信任问题，但带来了成本的上升和效率的下降。 比较直接的一些思路，是放松对每个节点都必须参与完整处理的限制（但至少部分节点要能合作完成完整的处理），这个思路已经在超级账本中启用；同时尽量减少核心层的处理工作。在联盟链模式下，还可以专门采用高性能的节点作为核心节点，用相对较弱的节点作为代理访问节点。 系统安全区块链目前最热门的应用前景是金融相关的服务，安全自然是讨论最多、挑战最大的话题。 区块链在设计上基于现有的成熟的密码学算法。但这是否就能确保其安全呢？世界上并没有绝对安全的系统。系统是由人设计的，系统也是由人来运营的，只要有人参与的系统，就容易出现漏洞。可以参考，著名黑客米特尼克所著的《反欺骗的艺术——世界传奇黑客的经历分享》，介绍了大量的实际社交工程欺骗场景。 有如下几个方面是很难逃避的:首先是立法。对区块链系统如何进行监管？攻击区块链系统是否属于犯罪？攻击银行系统是要承担后果的。但是目前还没有任何法律保护区块链以及基于它的实现。 其次是软件实现的潜在漏洞是无法避免的。考虑到使用了几十年的 openssl 还带着那么低级的漏洞（heart bleeding），而且是源代码就在大家眼皮底下。这背后曾经发生过啥，让人遐想连篇。对于金融系统来说，无论客户端还是平台侧，即便是很小的漏洞都可能造成难以估计的损失。 另外，公有区块链所有交易记录都是公开可见的。搞大数据的人听了是不是开始激动起来了，确实，这里面能分析的东西还真不少，而且规模够大、影响力够大……实际上，已有文献证明，比特币区块链的交易记录最终是能追踪到用户的。还有就是作为一套完全的分布式系统，公有的区块链缺乏有效的调整机制，一旦运行起来，出现问题也难以修正。即使是让它变得更公平、更完善的修改，只要有部分既得利益者合起来反对，那就无法加入进去。这让比特币本身的价值也蒙上了一层阴影。 此外，运行在区块链上的智能合约应用可能是五花八门的，必须要有办法进行安全管控，在注册和运行前需要有机制进行探测，以规避恶意代码的破坏。2016年6月17日，发生 DAO 系统漏洞被利用 事件，直接导致价值 6000 万美元的数字货币被利用者获取。尽管对于这件事情的反思还在进行中，但事实再次证明，目前基于区块链技术进行生产应用时，务必要细心谨慎地进行设计和验证。 数据库和存储系统区块链网络中的块信息需要写到数据库中进行存储。观察区块链的应用，大量的写操作、hash 计算和验证操作，跟传统数据库的行为十分不同。当年，人们观察到互联网应用大量非事务性的查询操作，而设计了非关系型（NoSql）数据库。那么，针对区块链应用的这些特点，是否可以设计出一些特殊的针对性的数据库呢？ levelDB、RocksDB 等键值数据库，具备很高的随机写和顺序读写性能，以及相对较差随机读的性能，被广泛应用到了区块链信息存储中。但目前来看，面向区块链的数据库技术仍然是需要突破的技术难点之一。笔者认为，未来将可能出现更具针对性的“块数据库（BlockDB）”，专门服务类似区块链这样的新型数据业务，其中每条记录将包括一个完整的区块信息，并天然地跟历史信息进行关联，一旦写入确认无法修改。所有操作的最小单位将是一个块。 可集成性在相当长的一段时间内，基于区块链的新业务系统将与已有的中心化系统共存。两种系统如何共存，如何分工，彼此的业务交易如何进行传递？这些都是很迫切的问题。这个问题解决不好，将是区块链技术落地的很大阻碍。 智能合约智能合约可视作一段部署在区块链上可自动运行的程序,其涵盖的范 围包括编程语言、编译器、虚拟机、事件、状态机、容错机制等。 虚拟机是区块链中智能合约的运行环境。虚拟机不仅被沙箱封装起来, 事实上它被完全隔离。也就是说运行在虚拟机内部的代码不能接触到网络、文件系统或者其他进程。甚至智能合约之间也只能进行有限的调用。智能合约本质上是一段程序,存在出错的可能性,甚至会引发严重问 题或连锁反应。需要做好充分的容错机制,通过系统化的手段,结合运行 环境隔离,确保合约在有限时间内按预期执行。 其它区块链提供的新应用和新的业务场景，也带来了对很多具体的运营问题。例如： 智能合约的合法性、安全性和可执行性； 如何将现实中的合约和条约对应为电子合约； 分布式系统的伸缩可靠性和数据迁移； 对存储系统新的挑战，特别是性能。 参考：yeasy","categories":[{"name":"Blockchain","slug":"Blockchain","permalink":"http://blog.peiyingchi.com/categories/Blockchain/"}],"tags":[{"name":"blockchain","slug":"blockchain","permalink":"http://blog.peiyingchi.com/tags/blockchain/"}]},{"title":"Blockchain and Supply Chain |区块链在供应物流领域的应用","slug":"blockchain-and-supply-chain","date":"2017-02-10T02:48:35.000Z","updated":"2017-03-19T08:19:26.000Z","comments":true,"path":"2017/02/10/blockchain-and-supply-chain/","link":"","permalink":"http://blog.peiyingchi.com/2017/02/10/blockchain-and-supply-chain/","excerpt":"总结供应链领域目前的痛点和区块链的现有应有方向。","text":"总结供应链领域目前的痛点和区块链的现有应有方向。 前言供应链是一个由物流、信息流、资金流所共同组成的,并将行业内的供应商、制造商、分销商、零售商、用户串联在一起的复杂结构。而区块链技术作为一种大规模的协作工具,天然地适合运用于供应链管理。 痛点供应链由众多参与主体构成, 不同的主体之间必然存在大量的交互和协作, 而整个供应链运行过程中产生的各类信息被离散地保存在各个环节各自的系统内,信息流缺乏透明度。这会带来两类严重的问题:一是因为信息不透明、不流畅导致链条上的各参与主体难以准确了解相关事项的状况及存在的问题, 从而影响供应链的效率;二是当供应链各主体间出现纠 纷时, 举证和追责均耗时费力, 甚至在有些情况下变得不可行。随着经济 全球化的快速推进, 企业必须在越来越大的范围内拓展市场, 因此, 供应链管理中的物流环节往往表现出多区域、长时间跨度的特征, 使得假冒伪劣产品这样的难题很难彻底消除。 基于区块链的解决思路首先,区块链技术能使得数据在交易各方之间公开透明,从而在整个供应链条上形成一个完整且流畅的信息流,这可确保参与各方及时发现供 应链系统运行过程中存在的问题,并针对性地找到解决问题的方法,进而提升供应链管理的整体效率。其次,区块链所具有的数据不可篡改和时间戳的存在性证明的特质能很好地运用于解决供应链体系内各参与主体之间的纠纷,实现轻松举证与追责。最后,数据不可篡改与交易可追溯两大特性相结合可根除供应链内产品流转过程中的假冒伪劣问题。 应用方向 商品流和资金流的同步The direction IBM and many other in finance are going is to look at permissioned ledgers connecting companies that know and (within limits) trust each other. The blockchain could allow companies to transact, resolve disputes and settle more efficiently than current practices. 溯源防伪用户拿到选购的生鲜商品，扫码即可追溯到它产地、采购、加工、储运等完整流程中的真实信息，而且这些信息无法篡改，让消费者吃得放心;用户购买了钻石饰品，通过其中内置的NFC芯片能了解它从生产、物流、门店甚至海关的完整记录，由于身份绝对的唯一性，一旦有非法的交易活动或是欺诈造假的行为，就会被侦测出来。此外,区块链技术也可用于药品、艺术品、收藏品、奢侈品等的溯源防伪 物流：利用数字签名和公私钥加解密机制,可以充分保证 信息安全以及寄、收件人的隐私。在物流过程中, 利用数字签名和公私钥加解密机制, 可以充分保证 信息安全以及寄、收件人的隐私。例如, 快递交接需要双方私钥签名,每个快递员或快递点都有自己的私钥,是否签收或交付只需要查一下区块链即可。最终用户没有收到快递就不会有签收记录, 快递员无法伪造签名, 因此可杜绝快递员通过伪造签名来逃避考核的行为, 减少用户投诉, 防止 货物的冒领误领。而真正的收件人并不需要在快递单上直观展示实名制信息, 由于安全隐私有保障,所以更多人愿意接受实名制, 从而促进国家物流实名制的落实。另外,利用区块链技术,通过智能合约能够简化物流程序和大幅度提升物流的效率。 现有公司 Everledger, which traces diamonds to digitally certify that they comply with the Kimberly Process, uses IBM’s cloud-based blockchain solution. Provenance 云象(YunPhant) 是超级账本（hyperledger）项目成员之一，是全球领先的区块链技术公司。云象区块链依托浙江大学智能计算与系统实验室，新加坡国立大学云象联合实验室，拥有多位计算机博士、硕士，致力于打造全球领先的企业级联盟链技术平台。由Roger Zimmermann教授和刘振广博士带领的新加坡国立大学云象联合实验室也在着力研究新型的区块链数据库，以达到一百万次每秒的交易速度，且已取得了第一阶段成果。由陈积明教授（长江学者）和何钦铭教授带领的浙江大学云象团队在安全和智能合约方向也取得了丰硕成果。云象与美国iBlockChain在深圳成立的区块链合资公司是前海区块链国际生态圈联盟秘书长单位，同时云象也是中关村区块链产业联盟成员 供应链/贸易金融流程自动化的步骤1.“将纸质信用证转换成可以自动执行支付的智能合约（transforming letters of credit to smart contracts with automated payments）”； 2.“将提单等纸质文件数字化，并以元数据的形式储存它们（digitizing printed documents, such as bills of lading and storing them as metadata）”； 3.“在每一步创建所有权记录（creating a record of ownership in each step）” Payments in a supply chain can be triggered by a certain, predefined action, occurring at any point in time.In general this works as follows: two parties agree to trade goods, and the selling party receives via his wallet a confirmation that he will be paid at a certain point if time. This guarantee is conditional, based on predefined criteria. The container with the goods contains a QR code, this is linked to a smart contract. When the goods arrive at the agreed point, and the pre-defined criteria are met, the smart contract is executed.This triggers the transfer of ownership to the buyer and payment to the supplier is executed automatically. The great advantage is that when the structure is set up, the costs for a transaction are minimal. They are comparable to physical mail (for example €1 per letter) versus e-mail (a negligible cost per item). 难点和挑战 政策：即使你创建了一个表面上看似严格的智能合约,也可以有一个传统的实体法律机构并不会承认交易进行的方式(例如,交易必须继续采用纸质的形式). 数据源：The main challenge, is setting up technology for farmers, field workers and others to collect data and insert it onto a blockchain. 迭代：It is not very easy to insert [a] new technology inside established supply chain systems because the integration challenges are not to be underestimated Reference Linkhttp://link.springer.com/chapter/10.1007/978-3-319-45348-4_19http://ieeexplore.ieee.org/abstract/document/7538424/?part=1","categories":[{"name":"Blockchain","slug":"Blockchain","permalink":"http://blog.peiyingchi.com/categories/Blockchain/"}],"tags":[{"name":"blockchain","slug":"blockchain","permalink":"http://blog.peiyingchi.com/tags/blockchain/"}]},{"title":"Understand Blockchain |理解区块链","slug":"understand-blockchain-01","date":"2017-01-25T13:38:08.000Z","updated":"2017-03-19T08:13:14.000Z","comments":true,"path":"2017/01/25/understand-blockchain-01/","link":"","permalink":"http://blog.peiyingchi.com/2017/01/25/understand-blockchain-01/","excerpt":"简单介绍下区块链(blockchain)的关键概念","text":"简单介绍下区块链(blockchain)的关键概念 区块链科技来源于比特币，如果你还不是很了解比特币，比较建议先去查询下比特币的科普视频。然后再可以先去看下我之前的一个学习笔记Bitcoin Blockchain |比特币区块链理解 基本原理基本概念包括： 交易（Transaction）：一次操作，导致账本状态的一次改变，如添加一条记录； 区块（Block）：记录一段时间内发生的交易和状态结果，是对当前账本状态的一次共识； 链（Chain）：由一个个区块按照发生顺序串联而成，是整个状态变化的日志记录。 如果把区块链作为一个状态机，则每次交易就是试图改变一次状态，而每次共识生成的区块，就是参与者对于区块中所有交易内容导致状态改变的结果进行确认。 节点需要将新区块的前一 个区块的哈希值、当前时间戳、一段时间内发生的有效交易及其梅克尔树 根值等内容打包成一个区块,向全网广播。 Blockchain 2.0 的典型特征如下： 智能合约（smart contract）：区块链系统中的应用，是已编码的、可自动运行的业务逻辑，通常有自己的代币和专用开发语言 DAPP:包含用户界面的应用，包括但不限于各种加密货币，如以太坊钱包 虚拟机：用于执行智能合约编译后的代码。 智能合约程序不只是一个可以自动执行的计算机程序：它自己就是一个系统参与者。它对接收到的信息进行回应，它可以接收和储存价值，也可以向外发送信息和价值。 这个程序就像一个可以被信任的人，可以临时保管资产，总是按照事先的规则执行操作。 常用缩略语 缩略语 完整 PoW 工作量证明(Proof of Work) PoS 权益证明(Proof of Stake) DPoS 股份授权证明(Delegate Proof of Stake) PBFT 实用拜占庭容错(Practical Byzantine Fault Tolerance) P2P 点对点(Peer to Peer) DAPP 分布式应用(Decentralized Application) KYC 客户识别(Know Your Customer) RSA RSA加密算法(RSA Algorithm) ECC 椭圆加密算法(Elliptic Curve Cryptography) BaaS 区块链即服务(Blockchain as a Service) 非对称加密算法非对称加密算法是指使用公私钥对数据存储和传输进行加密和解 密。公钥可公开发布,用于发送方加密要发送的信息,私钥用于接收方 解密接收到的加密内容。公私钥对计算时间较长,主要用于加密较少的 数据。常用的非对称加密算法有RSA和ECC。非对称加密算法的过程如图 2-3所示。区块链正是使用非对称加密的公私钥对来构建节点间信任的。 POW v.s. POSPOW: Proof of Work | 工作量证明一方（通常称为证明人）出示计算结果，这个结果众所周知是很难计算的但却很容易验证的。通过验证这个结果，任何人都能够确认证明人执行了一定量的计算工作量来产生这个结果 POS：Proof of Stake | 股权证明这又是什么意思呢？简单来说，就是一个根据你持有货币的量和时间，给你发利息的一个制度，在股权证明POS模式下，有一个名词叫币龄，每个币每天产生1币龄，比如你持有100个币，总共持有了30天，那么，此时你的币龄就为3000，这个时候，如果你发现了一个POS区块，你的币龄就会被清空为0。你每被清空365币龄，你将会从区块中获得0.05个币的利息(可理解为年利率5%)，那么在这个案例中，利息 = 3000 * 5% / 365 = 0.41个币，这下就很有意思了，持币有利息，非常好！（需要注意的是，5%的年利率仅仅是小编举例，并非每个POS模式的币种都是5%，比如点点币PPCoin就是1%年利率） 分类根据参与者的不同，可以分为公开（Public）链、联盟（Consortium）链和私有（Private）链。公开链，顾名思义，任何人都可以参与使用和维护，典型的如比特币区块链，信息是完全公开的。如果引入许可机制，包括私有链和联盟链两种。私有链，则是集中管理者进行限制，只能得到内部少数人可以使用，信息不公开。联盟链则介于两者之间，由若干组织一起合作维护一条区块链，该区块链的使用必须是有权限的管理，相关信息会得到保护，典型如银联组织。目前来看，公开链将会更多的吸引社区和媒体的眼球，但更多的商业价值应该在联盟链和私有链上。根据使用目的和场景的不同，又可以分为以数字货币为目的的货币链，以记录产权为目的的产权链，以众筹为目的的众筹链等。 误区目前，对区块链的认识还存在不少误区。首先，区块链不是数据库。虽然区块链也可以用来存储数据，但它要解决的问题是多方的互信问题。单纯从存储数据角度，它的效率可能不高，笔者也不推荐把大量的原始数据放到区块链上。其次，区块链不是要颠覆现有技术。作为基于多项已有技术而出现的新事物，区块链跟现有技术的关系是一脉相承的，在解决多方合作和可信处理上多走了一步，但并不意味着它将彻底颠覆已有的商业模式。很长一段时间里，区块链的适用场景仍需摸索，跟已有系统必然是合作共存的关系。 应用场景With smart contracts, for the first time, you can build business process automation software that cuts across different stakeholders, and can be relied on by all. Blockchain technology can get everyone looking at the same core data set. 未来几年内，可能深入应用区块链的场景将包括： 金融服务：主要是降低交易成本，减少跨组织交易风险等。该领域的区块链应用将最快成熟起来，银行和金融交易机构将是主力推动者。 征信和权属管理：这是大型社交平台和保险公司都梦寐以求的，目前还缺乏足够的数据来源、可靠的平台支持和有效的数据分析和管理。该领域创业的门槛极高，需要自上而下的推动。 资源共享：airbnb 为代表的公司将欢迎这类应用，极大降低管理成本。这个领域创业门槛低，主题集中，会受到投资热捧。 投资管理：无论公募还是私募基金，都可以应用区块链技术降低管理成本和管控风险。虽然有 DAO 这样的试水，谨慎认为该领域的需求还未成熟。 物联网与供应链：物联网是很适合的一个领域，短期内会有大量应用出现，特别是租赁、物流等特定场景。但物联网自身的发展局限将导致短期内较难出现规模应用 (click on the picture to enlarge) 未来区块链生态 整体设计 参考资料：http://book.8btc.com/books/1/digital_giant_chain/_book/http://8btc.com/doc-view-182.html","categories":[{"name":"Blockchain","slug":"Blockchain","permalink":"http://blog.peiyingchi.com/categories/Blockchain/"}],"tags":[{"name":"blockchain","slug":"blockchain","permalink":"http://blog.peiyingchi.com/tags/blockchain/"}]},{"title":"Bitcoin Blockchain |比特币区块链理解","slug":"bitcoin-blockchain","date":"2017-01-19T03:06:48.000Z","updated":"2017-03-19T08:20:56.000Z","comments":true,"path":"2017/01/19/bitcoin-blockchain/","link":"","permalink":"http://blog.peiyingchi.com/2017/01/19/bitcoin-blockchain/","excerpt":"Explain the key concepts in bitcoin and its underlying blockchain technology.","text":"Explain the key concepts in bitcoin and its underlying blockchain technology. Blockchain is a mindset。 Memory Keys Distributed (a network of nodes) Public Time-stamped Persistent Sending BitcoinFor A ⇒ B, A broadcasts the message to the bitcoin network (including the amount, the public key of the receiver, etc. Every node that receives it will update their copy of the ledger, and then pass along the transaction message.Every transaction has a unique digital signature that is created based on the sender’s private key, and can be verified by the receiver’s public key. To claim ownership of the bitcoin, you must prove that you are the owner of the public key. Account balances: In fact, no records of account balances are kept at all. Ownership of the funds is verified through links to previous transactions. To send 5 BTCs to Bob, Alice must reference other transactions where she received 5 or more BTCs.That’s why it takes so long when you install the BTC wallet software the first time. Because it downloads all the transactions ever made and checks each’s velidity. Owning BTC means that there are transactions in this list that point to your name and haven’t been spent. Because people will likely lose private keys due to hard drive crashes and insufficient backups, Bitcoin currency will eventually be a deflationary one. Still another security hole: Transaction OrderNodes need to agree on transaction order.The BTC system orders transactions by placing them in groups called blocks, and linking these blocks together in something called blockchain. Note that it is different from the transaction chain. Transactions in the same block are considered happened at the same time. Any transactions not yet in a block are called unconfirmed. Any node can collect a set of unconfirmed transactions into a block and broadcast it to the rest of the network as a suggestion for what the next block in a chain should be.Multiple nodes could generate blocks at the same time, so where are multiple versions to choose from. Each valid block must contain an answer to a very special mathematical problem. Computer runs entire text of the block + an additional random guess through something called a cryptographic hash, UNTIL the output is below a certain value.It takes 10 mins for the bitcoin network to solve a block. The first person who solves a math problem broadcasts their block and gets to have their group of transactions accepted as the next in the chain. However, while it is rare, a block may be solved by multiple nodes at the same time, then branches occur. How to deal with this? Well, you simply build on the first block you receive and works from there. The tie gets broken when someone solves the next block. The general rule: Immediately switch to the longest chain available.So the blockchain quickly stablize.Transactions/Facts are grouped in blocks, and there is only a single chain of blocks, replicated in the entire network. What is hashing?Hashing is also a common method of accessing data records. Consider, for example, a list of names:John SmithSarah JonesRoger AdamsTo create an index, called a hash table,for these records, you would apply a formula to each name to produce a unique numeric value. So you might get something like:1345873 John smith3097905 Sarah Jones4060964 Roger AdamsThen to search for the record containing Sarah Jones,you just need to reapply the formula, which directly yields the index key to the record. This is much more efficient than searching through all the records till the matching record is found. End of Chain InsecurityThe fact that there is some ambiguity in the end of the chain A double-spent attack in this block chain system: A⇒B will be threw back to the unconfirmed pool, but because A⇒A was confirmed with the same input, it will invalid A⇒B. Well, Math puzzle in each block actually prevent this, because Alice cannot change one block from the middle. The attach will only be possible if Alice owns more than half of the nodes in the world.So the system is only vulnerable to a double spend attach near the end of the chain, which is why it’s recommended to wait several blocks before considering received money final. MiningThe process of looking for blocks is called mining. This is because, just like gold mining, block mining brings an economical reward - some form of money. That’s the reason why people who run nodes in a blockchain are also called miners. Note: By default, a node doesn’t mine - it just receives blocks mined by other nodes. It’s a voluntary process to turn a node into a miner node. Every second, each miner node in a blockchain tests thousands of random strings to try and form a new block. So running a miner in the blockchain pumps a huge amount of computer resources (storage and CPU). That’s why you must pay to store facts in a blockchain. Reading facts, on the other hand, is free: you just need to run your own node, and you’ll recuperate the entire history of facts issued by all the other nodes. So to summarize: Reading data is free Adding facts costs a small fee Mining a block brings in the money of all the fees of the facts included in the block 每个矿工会把十分钟内所有unconfirmed transactions拿过来, 两两pair来产生hash,一层层两两pair产生一个最终hash. 简而言之，比特币区块链的挖矿流程：广播比特币网络中的每一笔交易，使每个参与者（指矿工）都记录下这笔交易。每个参与者接收到交易信息后，都要将该笔交易盖上时戳，收入区块。由于每个矿工都做了工作，谁赢了获得奖励呢？此时参与者们要通过一个计算游戏，谁能最快解出SHA256运算的值，谁就将赢得打包区块的权利，并获得系统的25个比特币奖励。这个数量的设定是每四年减半。（比特币已经到了第七个年头了）获得记账权的矿工将向全网广播这十分钟内区盖了时戳的交易，其他参与者将核对这些账目当其他参与者都确认无误后，该区块就确认合法，就进入了下一轮的区块争夺战。多个区块逐渐形成区块链。","categories":[{"name":"Blockchain","slug":"Blockchain","permalink":"http://blog.peiyingchi.com/categories/Blockchain/"}],"tags":[{"name":"blockchain","slug":"blockchain","permalink":"http://blog.peiyingchi.com/tags/blockchain/"}]}]}